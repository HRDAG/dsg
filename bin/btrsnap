#!/usr/bin/env python 

from pathlib import Path
import os
import os.path
from datetime import datetime
import re
import subprocess 
import git


def get_repo_state(pth: str | Path,  scott: bool) -> list[str]:
    splitter = re.compile(r'\|\|')
    pth = Path(pth) 
    ran = subprocess.run(f"ssh scott _find-repo-files -p {pth}",
                         shell=True, capture_output=True)
    cmd = f'_find-repo-files -p "{pth}"'
    if scott: 
        cmd = f"ssh scott {cmd}"
    ran = subprocess.run(cmd, shell=True, capture_output=True)
    assert ran.returncode == 0, f"find failed: {ran}"
    recs = [s.strip() for s in splitter.split(ran.stdout.decode("utf-8"))]
    return recs


def get_last_state(localrepo):
    snap_meta_path = Path(localrepo.working_tree_dir) / '.snap'
    with open(snap_meta_path / 'last-sync-state', 'rt') as f:
        laststate = [r.strip() for r in f.readlines()]
    return laststate


def state_to_dict(xstate: list[str], reponame: str) -> dict: 
    p, targ, size, mtime = xstate[0].split("|")
    parts = Path(p).parts
    assert reponame in parts
    # we want the path relative to the repo's root; we'll 
    # take the rightmost parts of each path reference below.
    try: 
        splt = parts.index('HEAD')
    except ValueError:
        splt = parts.index(reponame)
    splt += 1 
    statedict = dict()
    for rec in xstate:#  (r for r in xstate if r.strip()):
        if rec.strip() == "":
            continue
        try:
            pth, targ, size, mtime = rec.split("|")
        except ValueError:
           raise AssertionError(f"rec.split failed with {rec}") 
        pth = str(Path(*Path(pth).parts[splt:]))
        statedict[pth] = targ, size, mtime
    return statedict


if __name__ == '__main__':

    localrepo = git.Repo('/Users/pball/projects/hrdag/KO')
    reponame = Path(str(localrepo.working_tree_dir)).name
    snaprepopath = Path(f"/var/repos/snap/{reponame}/HEAD")
    dd_re = re.compile(r'\/input\b|\/output\b|\/frozen\b|\/note\b')

    localstate = get_repo_state(str(localrepo.working_tree_dir), scott=False)
    remotestate = get_repo_state(snaprepopath, scott=True)
    laststate = get_last_state(localrepo)

    local_state_d = state_to_dict(localstate, reponame)
    remote_state_d = state_to_dict(remotestate, reponame)
    last_state_d = state_to_dict(laststate, reponame)


# done.
